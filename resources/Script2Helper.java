// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;
/**
 * Script Name   : <b>Script2</b><br>
 * Generated     : <b>2018/07/18 15:36:26</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows 7 amd64 6.1 <br>
 * 
 * @since  julio 18, 2018
 * @author DELL
 */
public abstract class Script2Helper extends RationalTestScript
{
	/**
	 * Aceptar: with default state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : Aceptar
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject aceptar() 
	{
		return new GuiTestObject(
                        getMappedTestObject("aceptar"));
	}
	/**
	 * Aceptar: with specific test context and state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : Aceptar
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject aceptar(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("aceptar"), anchor, flags);
	}
	
	/**
	 * Aceptar: with default state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : Aceptar
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject aceptar2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("aceptar2"));
	}
	/**
	 * Aceptar: with specific test context and state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : Aceptar
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject aceptar2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("aceptar2"), anchor, flags);
	}
	
	/**
	 * CardNumberIncludeTheSpaces: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpaces() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpaces"));
	}
	/**
	 * CardNumberIncludeTheSpaces: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpaces(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpaces"), anchor, flags);
	}
	
	/**
	 * CityStateZip: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : City, State, Zip:
	 * 		name : .cszField
	 * 		.classIndex : 7
	 */
	protected TextGuiSubitemTestObject cityStateZip() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cityStateZip"));
	}
	/**
	 * CityStateZip: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : City, State, Zip:
	 * 		name : .cszField
	 * 		.classIndex : 7
	 */
	protected TextGuiSubitemTestObject cityStateZip(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cityStateZip"), anchor, flags);
	}
	
	/**
	 * creditCombo: with default state.
	 *		.itemCount : 3
	 * 		.itemText : {Visa,Amex,Mastercard}
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Card Type:
	 * 		name : creditCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject creditCombo() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("creditCombo"));
	}
	/**
	 * creditCombo: with specific test context and state.
	 *		.itemCount : 3
	 * 		.itemText : {Visa,Amex,Mastercard}
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Card Type:
	 * 		name : creditCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject creditCombo(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("creditCombo"), anchor, flags);
	}
	
	/**
	 * ExpirationDate: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDate() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDate"));
	}
	/**
	 * ExpirationDate: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDate(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDate"), anchor, flags);
	}
	
	/**
	 * Name: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Name:
	 * 		name : .nameField-cust
	 * 		.classIndex : 5
	 */
	protected TextGuiSubitemTestObject name() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("name"));
	}
	/**
	 * Name: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Name:
	 * 		name : .nameField-cust
	 * 		.classIndex : 5
	 */
	protected TextGuiSubitemTestObject name(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("name"), anchor, flags);
	}
	
	/**
	 * NewCustomer: with default state.
	 *		text : New Customer
	 * 		.class : javax.swing.JRadioButton
	 * 		.priorLabel : Choose One: 
	 * 		accessibleContext.accessibleName : New Customer
	 * 		name : radioButtonA
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject newCustomer() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("newCustomer"));
	}
	/**
	 * NewCustomer: with specific test context and state.
	 *		text : New Customer
	 * 		.class : javax.swing.JRadioButton
	 * 		.priorLabel : Choose One: 
	 * 		accessibleContext.accessibleName : New Customer
	 * 		name : radioButtonA
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject newCustomer(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("newCustomer"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"), anchor, flags);
	}
	
	/**
	 * Phone: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Phone:
	 * 		name : .phoneField
	 * 		.classIndex : 8
	 */
	protected TextGuiSubitemTestObject phone() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("phone"));
	}
	/**
	 * Phone: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Phone:
	 * 		name : .phoneField
	 * 		.classIndex : 8
	 */
	protected TextGuiSubitemTestObject phone(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("phone"), anchor, flags);
	}
	
	/**
	 * PlaceAnOrder: with default state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		.processName : javaw.exe
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"));
	}
	/**
	 * PlaceAnOrder: with specific test context and state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		.processName : javaw.exe
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"), anchor, flags);
	}
	
	/**
	 * Quantity: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Quantity:
	 * 		name : .quantityField
	 * 		.classIndex : 2
	 */
	protected TextGuiSubitemTestObject quantity() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("quantity"));
	}
	/**
	 * Quantity: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Quantity:
	 * 		name : .quantityField
	 * 		.classIndex : 2
	 */
	protected TextGuiSubitemTestObject quantity(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("quantity"), anchor, flags);
	}
	
	/**
	 * Street: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Street:
	 * 		name : .streetField
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject street() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("street"));
	}
	/**
	 * Street: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Street:
	 * 		name : .streetField
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject street(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("street"), anchor, flags);
	}
	
	

	protected Script2Helper()
	{
		setScriptName("Script2");
	}
	
}

